// Code generated by mockery v1.0.0. DO NOT EDIT.

package persistencemock

import (
	context "context"

	model "github.com/a-faceit-candidate/userservice/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *Repository) Create(_a0 context.Context, _a1 *model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *Repository) Delete(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Repository) Get(_a0 context.Context, _a1 string) (*model.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: _a0
func (_m *Repository) ListAll(_a0 context.Context) ([]*model.User, error) {
	ret := _m.Called(_a0)

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func(context.Context) []*model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCountry provides a mock function with given fields: ctx, countryCode
func (_m *Repository) ListCountry(ctx context.Context, countryCode string) ([]*model.User, error) {
	ret := _m.Called(ctx, countryCode)

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.User); ok {
		r0 = rf(ctx, countryCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, countryCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, user, prevUpdatedAt
func (_m *Repository) Update(ctx context.Context, user *model.User, prevUpdatedAt time.Time) error {
	ret := _m.Called(ctx, user, prevUpdatedAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, time.Time) error); ok {
		r0 = rf(ctx, user, prevUpdatedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
